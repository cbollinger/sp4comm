#+CATEGORY: SP4COMM W8

#+LATEX_HEADER: \usepackage{enumitem}
#+LATEX_HEADER: \usepackage[table]{xcolor}
#+LaTeX_HEADER: \usepackage{tcolorbox}

#+LaTeX_HEADER: \usepackage[tikz]{bclogo}
#+LaTeX_HEADER: \usepackage[customcolors]{hf-tikz}

#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{amsxtra}
#+LATEX_HEADER: \usepackage{mathtools} 
#+LATEX_HEADER: \usepackage{dsptricks,dspfunctions,dspblocks}

# +Latex: \newenvironment{gbar}[2]{\def\FrameCommand{{\color{#1}\vrule width 3pt}\colorbox{#2}}\MakeFramed{\advance\hsize-\width\FrameRestore}}{\endMakeFramed}
#+Latex: \renewcommand{\arraystretch}{1.2}
#+Latex: \everymath{\displaystyle}

#+SETUPFILE: ~/.emacs.d/git-submodules/org-html-themes/org/theme-readtheorg.setup

* Week 8 Module 6: 
** Digital Communication Systems
*** Introduction to digital communications
**** The success factors for digital communications
1. Power of the DSP paradigmw
   - integers are easy to *regnerate*
   - good phase control
   - adaptive algorithms
2. Algorithmic nature of DSP is a perfect match with information therory:
   - Image Coding: JPEG's entropy coding
   - Encoding of of accustic or video informatiion: CD's and DVD's error
     correction
   - Communication Systems: trellis-coded modulation and Vierbi coding
3. Hardware advancement
   - minituarization
   - general-purpose platforms
   - power efficiency
     
**** The analog channel constraints
+ unescapable "limits" of physical channels:
  - *Bandwith:* the signal that canbe send over a channel has a limited frequency band
  - *Power:* the signal has limited power over this band, e.g. due to power limit
    of the equipment
+ Both constraints will affect the final \textcolor{blue}{capacity} of the
  channel.
+ The maximum amound of information that can be reliably delivered over a
  channel - bits per second -
+ Bandwidth vs. capacity:
  - small sampling period $T_s \Rightarrow$ high capacity
  - but the bandwidth signal grows as $\frac{1}{T_s} \Rightarrow$
    $\Omega_N =  \frac{\pi}{T_s}$
    
**** The design Problem
- We are going to adapt the all-digital paradigm
- Converting the specs to digital design
  
#+begin_src octave :exports results :results file
    pkg load signal

    #---------------- Continous Time Calculation -------------
    Fp    = 10e3;             # spacing pseudo continous signal 
    Fv    = -100:1/Fp:100;    # frequency vector 
    F_max = 150;              # F_max
    F_min = 50;               # F_min
    x1 = rectpuls(Fv,F_max);
    x2 = rectpuls(Fv,F_min);
    x = x1 - x2;

    ## #---------------- A/D Conversion ------------------------
    fs = 2*F_max;       # Myquist
    ## #---------------- Discrete Time Calculation -------------

    N     = 64;                # Sequence length
    w     = -pi:1/N:pi;
    w_max = 2*pi*(F_max/fs);
    w_min = 2*pi*(F_min/fs);
    y1    = rectpuls(w,w_max);
    y2    = rectpuls(w,w_min);
    y     = y1-y2;

    figure( 1, "visible", "off" ); # Do not open the graphic window in org

    subplot(2, 1, 1)
    plot(Fv,x, "linewidth", 3)
    axis([-100, 100 0 1.5])
    xlabel("Hz")
    set(gca, "fontsize", 16)
    set(gca, "YTick", 0:1)
    set(gca, "XTick", -100:25:100)
    set(gca,'XTickLabel',{'-100','-75','-50','-25', '0', '25', '50', '75','100'})
    title("Continous Time")

    subplot(2, 1, 2)
    plot(w,y, "linewidth", 3)
    axis([-pi, pi 0 1.5])
    xlabel("rad")
    set(gca, "fontsize", 16)
    set(gca, "XTick", -pi:pi/2:pi)
    set(gca, "YTick", 0:1)
    set(gca,'XTickLabel',{'-\pi', '-\pi/2', '0','\pi/2', '\pi'})
    title("Discrete Time")

    print -dpng "-S800,400" ./image/6_1_band_restriction.png;
    ans = "./image/6_1_band_restriction.png";
#+end_src

#+results:
[[file:./image/6_1_band_restriction.png]]

- with:
  - Sampling Frequency $F_S \ge 2f_{max}$
  - Continuous Time $F_s/2$: Nyquist frequency
  - Maximum Frequency: $\frac{F_s}{2} \Rightarrow \pi$
  - Bandwidth: $\omega_{min,max} 2\pi\frac{f_{min,max}}{F_s}$ 

- Transmitter design
  - convert a bitstream into a sequence of symbols a[n] via a mapper
  - model a[n] as \textcolor{blue}{white random sequence} $\Rightarrow$ add a
    \textcolor{blue}{scrambler}
  - no we need to convert a[n] into a continuous-time signal within the constraints

      #+BEGIN_SRC ditaa  :file ./image/6.1_transmitter-01.png 

                  +--------------+       +--------------+       +----------+
                  |              |       |              | a[n]  |          |
        ..01100-->+  Scrambler   +---+-->+  Mapper      +------>+     ?    +------> s(t)
        01010..   |              |   ^   |              |       |          |
                  +--------------+   |   +--------------+       +----------+
                                     |
                                     |
                            random binary sequence
#+END_SRC

If we assume that the data is randomized and therefore the symbol sequence is a
white sequence, we know that the power spectral density is simply equal to the
variance.  And so the power of the signal will be constant over the entire
frequency band.  But we actually need to fit it into the small band here as
specified by the bandwidth constraint.  So how do we do this?  Well, in order to
do that, we need to introduce a new technique called
\textcolor{blue}{upsampling}, and we will see this in the next module.

We are talking about digital communication systems and in this lesson we will
talk about how to fulfill the \textcolor{blue}{bandwidth constraint}. The way we
are going to do this is by introducing an operation called
\textcolor{blue}{upsampling} and we will see how upsampling allows us to fit the
spectrum generated by the transmitter onto the band allowed for by the channel.
*** Controlling the bandwidth
- Shaping the bandwidth Remember that our assumption is that the signal
  generated by the transmitter is a wide sequence and therefore its power
  spectral density will be \textcolor{blue}{constant and full band}. In order to
  meet the bandwith constraint, we need to shrink the support of the power
  spectral density.
    - the answer is \textcolor{blue}{multirate} techniques
**** Upsampling
- Our Problem
- bandwith constraint requires us to control the spectral support of a signal
  - we need to be able to shrink the support of a full-band signal

- Upsampling can be obtained by interpolating a discrete time sequence to get a
  continuous time signal. And resample the signal with a sampling period which
  is k-times smaller than the original interpolation sample.

- Or we do it entirly digitally.
  1. we need to "increase" the number of samples by k
  2. obviously x_U[m] = x[n] when m multiple of K
  3. for lack of better strategy, put zeros elsewhere

- Upsampling in the time domain
  #+BEGIN_SRC octave :exports results :results file
    pkg load signal

    clear all, close all;
    N = 64;
    n = -N/2:N/2-1;                                      % Time index
    L = 3;                                           % Up-sampling factors
    x = sin(2*pi*n/64) + sin(3*2*pi*n/64)/3;       % Generating the original signal
    v1 = upsample(x,L);                              % Up-sampling
    r = -(length(v1))/2:(length(v1))/2-1;                              % new Time index

    figure( 1, "visible", "off" ); # Do not open the graphic window in org

    subplot(2,1,1), stem(n,x,"linewidth", 3, "filled", "markersize", 6), ylabel('x[n]')
    title('Original signal x[n]')
    set(gca, "fontsize", 24);
    axis([-8, 8, -1, 1]);
    set(gca, 'YTick', 0:1.5);
    set(gca, 'XTick', -8:2:8);

    subplot(2,1,2), stem(r,v1,"linewidth", 3, "filled", "markersize", 6), ylabel('v_1[r]')
    title('Upsampling by 2')
    axis([-32, 32, -1, 1]);
    set(gca, "fontsize", 24);
    set(gca, 'YTick', 0:1.5);
    set(gca, 'XTick', -40:10:40);
    grid off;
    title('Excerpt upsampled by 4');

    print -dpng "-S800,400" ./image/6_2_upsampling_01.png;
    ans = "./image/6_2_upsampling_01.png";
#+end_src

   #+results:
[[file:./image/6_2_upsampling_01.png]]


- Upsampling in the digital domain: Frequency Domain

  #+begin_src latex 
    \begin{align*}
      X_U(e^{j\omega}) &= \sum_{m=-\infty}^{\infty} x_U[m]e^{-j\omega m} \text{ with } x_U = 0 \text{ if } m \neq nK\\
                     &= \sum_{m=-\infty}^{\infty} x[n]e^{-j\omega nK} \\
                     &= X(e^{j\omega K})
    \end{align*}
  #+end_src
This is simply a scaling of the frequency axis by a factor of K. Graphical
interpretation: since we are multiplying the frequency axis by a factor of K,
there will be a shrinkage of the frequency axis.

#+begin_src octave :exports results :results file
  pkg load signal
    clear all, close all;                          # Size of the sequence
    w = 4/12/pi
    t = -3/4*pi:1/1000:3/4*pi    # Axis Discrete Time Frequency Domain
    K = 3;                        # Upsampling konstant
    # Generation of the original Frequency response
    x1 = sin(2*pi*w*t+pi/2);
    x2 = 1/K*sin(2*pi*3*w*t - pi/2);
    x3 = x1 +x2

    w = [-pi:1/1000:(-3/4*pi)-1/1000, t, 3/4*pi+1/1000:1/1000:pi]
    X = [zeros(1,(length(w)-length(t))/2), x3, zeros(1,(length(w)-length(t))/2)];

    X2  = [X,X,X,X,X]
    w2  = [-5*pi:1/1000:5*pi-1/1000];
    w3h = -K*pi:K*pi+1;
    X3h = zeros(1,length(w3h));

    X3 = [X,X,X]
    w3 = [-pi:1/(K*1000):pi-1/3000];
    HR = rectpuls(w3,2*pi/3);

    figure( 1, "visible", "off" )     # Do not open the graphic window in org

    subplot(4, 1, 1);
    plot(w, X, "linewidth", 3);
    axis([-pi,pi,0,1]);
    set(gca, "fontsize", 20)
    set(gca,'XTick',-pi:pi/4:pi)
    set(gca,'XTickLabel',{'-\pi','3/4\pi','-\pi/2', '-1/4\pi','0', '1/4\pi','\pi/2','3/4\pi','\pi'})
    set(gca, 'YTick', 0:1);
    ylabel('X(e^j^\omega)');
    title("Frequency response of the original signal")
    grid off;

    subplot(4, 1, 2);
    plot(w2, X2, "linewidth", 3, w3h, X3h, "linewidth", 6);
    axis([-5*pi,5*pi,0,1]);
    set(gca, "fontsize", 20)
    set(gca,'XTick',-5*pi:pi:5*pi)
    set(gca,'XTickLabel',{'-5\pi','-4\pi','-3\pi','-2\pi','-\pi','0', '\pi','2\pi','3\pi','4\pi','5\pi'})
    set(gca, 'YTick', 0:1);
    ylabel('X(e^j^\omega)');
    title("2-\pi periodic signal")
    grid off;

    subplot(4, 1, 3);
    plot(w3, X3, "linewidth", 3, w3, HR, '--', 'linewidth', 3, "color", "r");
    axis([-pi,pi,0,1]);
    set(gca, "fontsize", 20)
    set(gca,'XTick',-pi:pi/2:pi)
    set(gca,'XTickLabel',{'-\pi','-\pi/2','0','\pi/2','\pi'})
    set(gca, 'YTick', 0:1);
    ylabel('X_U(e^j^\omega)');
    title("Upsampled by 3");
    text(pi/3+0.1, -0.4, '\fontsize{24}\it\pi/K   ',  "color",  "red",  "interpreter",  "tex",  "horizontalalignment",  "center");
    text(-pi/3-0.1, -0.4, '\fontsize{24}\it-\pi/K   ',  "color",  "red",  "interpreter",  "tex",  "horizontalalignment",  "center");
    grid off;
    ans = "./image/6_2_upsampling_freq_02.png";

    subplot(4, 1, 4);
    plot(w3, X3.*HR, "linewidth", 3);
    axis([-pi,pi,0,1]);
    set(gca, "fontsize", 20)
    set(gca,'XTick',-pi:pi/4:pi)
    set(gca,'XTickLabel',{'-\pi','3/4\pi','-\pi/2', '-1/4\pi','0', '1/4\pi','\pi/2','3/4\pi','\pi'})
    set(gca, 'YTick', 0:1);
    ylabel('X_U(e^j^\omega)');
    title("Frequency response of the upsampled and filtered signal");
    grid off;

    print -dpng "-S800,600" ./image/6_2_upsampling_freq_02.png;
    ans = "./image/6_2_upsampling_freq_02.png";
#+end_src

#+results:
[[file:./image/6_2_upsampling_freq_02.png]]


- $\frac{\pi}{K}$: Filter Cut-Off Frequency
- The bandwidth of the signal was shrinked by factor K=3: from $\frac{3}{4} \pi$
  to $\frac{1}{4} \pi$

- Upsampling in the digital domain: Time Domain
  1. insert K-1 zeros after every sample
  2. ideal lowpass filtering with $\omega_c = >frac{\pi}{K}$

     #+begin_src latex
       \begin{align*}
              x^[n] &= x_U(n) * sinc(n/K) \\
                    &= x_U[i] sinc \left( \frac{n-i}{K}\right) \\
                    &= x[m] sinc \left( \frac{n}{K} - m\right) \text{, with } i = mK \\ 
       \end{align*}
     #+end_src

     Which is exactely the same formula when using an interpolator and a sampler.
**** Fitting the transmitter spectrum
The bandwidth constraint says that only frequencies between $F_{min}$ and
$F_{max}$ are allowed. To translate it to the digital domain, follow the
preceeding steps:
- let $W = F_{max} - F_{min}$
- pick $F_s$ so that:
  - $F_s > 2 F_{max}$
  - $F_s = KW$, $k \in \mathbb{N}$
- $\omega_{max} - \omega_{min} = 2\pi \frac{W}{F_s} = \frac{2\pi}{K}$
- \textcolor{blue}{we can simply upsample by K}

  #+ATTR_LATEX: :options [logo=\bcbook, couleur=yellow!10, barre=snake, arrondi=0.1]{Bandwith constrainth}
  #+BEGIN_bclogo
  And so we can simply upsample the sample sequence by K, so that its bandwidth
  will move from 2pi to 2pi/K, and therefore, its width will fit on the band
  allowed for by the channel.
  #+END_bclogo

#+BEGIN_SRC ditaa  :file ./image/6.1_transmitter-02.png 

            +--------------+       +--------------+
            |              |       |              | a[n]   -----  
  ..01100-->+  Scrambler   +---+-->+  Mapper      +------>( K ⬆ ) ---+
  01010..   |              |   ^   |              |        -----     |
            +--------------+   |   +--------------+                  |
                               |                                     |
                        random binary sequence                       |
                                                                     |
     +---------------------------------------------------------------+
     |
     |     +------------+                    +---------+
     |     |     |      | b[n]  -----   s[n] |         |
     +---->+   +-+-+    +----->(  X  ) ----->+   D/A   +----> s(t)
           |  -|-+-|->  |       --+--        |         |
           |     |      |         ^          +---------+
           +------------+         |         
                                  |         
                pi/k          cos(wn)




#+END_SRC

#+ATTR_LATEX: :options [leftmargin=3cm,labelwidth=2.7cm,itemindent=-2pt]
- Scrambler :: Randomizes the data, ensures the the resulting bitstream is
  equiprobable.
- Mapper :: Segments the bit-stream into consecutive groups of M bits. And this
  bits select one of $2^M$ possible signaling values. The set of all possible
  signaling values is called the \textcolor{blue}{alphabet}.
- a[n] :: The actual discrete-time signal. The sequence of symbols to be transmitted.
- K :: The uppsampler narrows the spectral occupancy of the symbol
  sequence. The following low pass filter is known as the
  \textcolor{blue}{shaper}, since it determines the time domain shape of the
  transmitted symbols.
- b[n] :: The \textcolor{blue}{baseband} signal. Produced
- s[n] :: The \textcolor{blue}{passand} signal. $s[n] = Re\{c[n]\} = Re\{b[n]e^{j\omega_c n}\}$ The signal which is
  fed to the D/A converter is simply the real part of the complex bandpass
  signal. With $\omega_c = \frac{\omega_max - \omega_min}{2}$ 

- Data Rates
  - up-sampling does not change the data rate
  - we produce (and transmitt) W symbols per seconds
  - W is sometimes called the \textcolor{blue}{Baud Rate} of the system and is equal to the
    available bandwidth.

- Raised Cosine    

*** Controlling the power
**** Noise and probability of error
- Transmitter reliability
  - transmitter sends a sequence of symbols a[n]
  - receiver obtains a sequence $\hat{a}[n]$
  - even if no distortion we can't avoid noise: $\hat{a}[n] = a[n] + \eta[n]$
  - when noise is large, we make an error
- Probability of error depends on:
  - power of the noise with respect to the power of the signal
  - decoding strategy
  - alphabet of transmission symbols
***** Signaling alphabets
- we have a (randomized) bitstream coming in
- we want to send some up-sampled and interpolated samples over the channel
- how do we get from bit-stream to samples: How does the mapper works
- \textcolor{blue}{mapper:}
  - split incoming bitstream into chunks
  - assign a symbol a[n] from a finite alphabet $A$ to each chunk.
- \textcolor{blue}{slicer:}
  - receive a value $\hat{a}$[n]
  - decide which symbol from $A$ is "closest" to $\hat{a}[n]$
***** Example: two-level signaling
  - \textcolor{blue}{mapper:}
    - split incoming bitstream into *single bits*
    - a[n] = G of bit is 1, a[n] = -G if bit is 0
  - \textcolor{blue}{slicer:}
    #+begin_src latex
      \begin{equation*}
        n-th \text{ bit} =
        \begin{cases}
          1 \text{, if } \hat{a}[n] > 0 \\
          0 \text{, otherwise }
        \end{cases}
      \end{equation*}
    #+end_src

- Hypothesis  With the following hypothsis we can calculate the probability of error:
    - $\hat{a}[n] = a[n] Q\eta[n]$
    - bits in bitstream are equiprobable: zero and one appear with probability
      50% each
    - noise and signal are indepenedent
    - noise is additive white Gaussian noise zero mean and variance $\sigma_0$
 
- Porbability Error

     #+begin_src latex
    \begin{align*}
      P_{err} &=   P\left[\eta[n] < -G | \text{ n-th bit is 1} \right]
                + P\left[\eta[n] > G | \text{ n-th bit is 0} \right] \\
             &= \left(P\left[\eta[n] < -G \right] + P\left[\eta[n] > G\right] \right) / 2 \\
             &= P\left[\eta[n] > G\right] \\
              &= \int_G^{\infty} \frac{1}{\sqrt{2\pi\sigma_0^2}} e^{-\frac{\tau^2}{2\sigma_0^2}} d\tau
                \text{, with the PDF for the Gaussian Distribution with the known variance}\\
             &= erfc(G/\sigma_0) \text{, Numerical Packages: The Error Function}
    \end{align*}
  #+end_src

  #+ATTR_LATEX: :options [leftmargin=3cm,labelwidth=2.7cm,itemindent=-2pt]
- Error Function erfc ::
  Integral from G to inifity of the PDF for the guassion distribution with the
  known variance $\igma_0$. As available in most numerical packages

#+ATTR_LATEX: :options [logo=\bcbook, couleur=yellow!10, barre=snake, arrondi=0.1]{Probability Error}
#+BEGIN_bclogo
Is some function of the ratio between the amplitude of the signal and the
standard deviation of the noise.
#+END_bclogo

  
- transmitted power
  #+begin_src latex
    \begin{align*}
      \sigma^2 &=   G^2 P\left[\text{ n-th bit is 1} \right]
                  + G^2 P\left[\text{ n-th bit is 0} \right] \\
               &= G^2
    \end{align*}
     #+end_src

#+begin_src latex
  \begin{tcolorbox}[colback=red!5!white,colframe=red!75!black,title=Probability of Error]
    \begin{equation*}
      P_{err} = erfc(\sigma_s/\sigma_0) = erfc(sqrt{SNR})
    \end{equation*}
  \end{tcolorbox}
#+end_src
  

And since we are in a log log scale, we can see that the probability of error
decays exponentially with the signal to noise ratio.  Absolute rate of decay
might change, in terms of the linear constants involved in the curve.  The trend
will stay the same, even for more complex signaling schemes

***** Lesson learned:
- to reduce the probability of error increase G
- increasing G increases the power
- we can't go above the channel's power constraint.

**** Multilevel signaling
- binary signaling is not very efficient (one bit at a time)
- to increase the throughput we can use multilevel signaling
  
#+ATTR_LATEX: :options [leftmargin=3cm,labelwidth=2.7cm,itemindent=-2pt]
- the general idea ::
  We take now larger chunks of bits, and therefore, we have alphabets, that have
  a higher cardinality. So more values in the alphabet, means more bits per
  symbol, and therefore a higher data rate. But not to give the ending away, we
  will see that the power of the signal will also be dependent of the size of
  the alphabet, and so in order not to exceed the certain probability of error,
  given the channel's power of constraint. We will not be able to grow the
  alphabet indefinitely, but we can be smart in the way we build this
  alphabet. And so we will look at some examples.
***** Pulse Ampltitude Modulation PAM
- \textcolor{blue}{mapper:}
  - split incoming bitstream into chunks of M bits
  - chunks define a sequence of integers k[n] \in {0,1,2..2^M-1}
  - a[n] = G((-2^M +1) + 2k[n]) odd integers around zero
    - with M=2 and G=1: a[n]=-3.-1, 1, 3
- \textcolor{blue}{slicer:}
  - $a'[n] = arg min[|\hat{a}[n] - a|]$

- PAM with M=2, G=1  
    #+begin_src latex
      \begin{tikzpicture}[x=5.2mm,scale=1,>=stealth]
        \node at (0,0) {};
        \node at (15.4,0) {};
        \draw[line width=2pt] (15.4,-0.2) -- (15.4,-0.5);
        \draw[line width=2pt] (0,-0.5) -- (15.4,-0.5);
        \foreach \val [count=\x] in {0,...,4}
          \draw[line width=2pt] (20* \val mm, -0.2) -- (20*\val mm, -0.8);
        \foreach \val [count=\x] in {0,...,4}
          \draw (20* \val mm, -0.8)
          node[anchor=north] {%
            \pgfmathparse{-3+2*\val}%
            \pgfmathprintnumber{\pgfmathresult}%
            };
        \foreach \val [count=\x] in {0,...,3}
          \draw (10* \val mm + 10mm + 10* \val mm, -1)
             node[anchor=north] {2G};
      \end{tikzpicture}
  #+end_src

- distance between points is 2G
- using odd integers creates a \textcolor{blue}{zero-mean sequence}
- probability error analysis for PAM is analog the lines of binary signaling
- can we increase the throughput of PAM even further
- here's a wild idea, let's use complex numbers
  
***** Quadratur Amplitude Modulation QAM
- \textcolor{blue}{mapper:}
  - split incoming bitstream into chunks of M bits, M even
  - use M/2 bits to define a PAM sequence $a_r[n]$
  - use the remaining M/2 bits to define an independent PAM sequence $a_i[n]$
  - a[n] = G(a_r[n] Aj_i[n])

- \textcolor{blue}{slicer:}
  - $a'[n] = arg min[|$\hat{a}[n] - a|]$

So the transition alphabet a, is given by points in the complex plane with odd
valued coordinates around the origins.  The receiver deslicer works by finding
the symbol in the alphabet which is closest in Euclidian distance to the
relieved symbol.

- Some QAM Constellations with G=1
#+attr_latex: :options {0.3\textwidth}
#+begin_minipage latex
M=2
    \begin{tikzpicture}[scale=1.1]
    \draw[->] (-1.5,0) -- (1.5,0) node[right] {$Re$};
    \draw[->] (0,-1.5) -- (0,1.5) node[above] {$Im$};

    \foreach \x in {0,...,3} \fill (90*\x+45:1)  circle (0.08);
    \draw ( 1.0,-0.1) node [below] {1}  -- ( 1.0, 0.1);
    \draw (-1.0,-0.1) node [below] {-1} -- (-1.0, 0.1);
    \draw (-0.1, 1.0) node [left]  {1}  -- ( 0.1, 1.0);
    \draw (-0.1,-1.0) node [left]  {-1} -- ( 0.1,-1.0);
  \end{tikzpicture}
 #+end_minipage                                          
#+attr_latex: :options [c]{0.4\textwidth}
#+begin_minipage latex
M=4
 \begin{tikzpicture}[scale=0.5]
    \draw[->] (-3.5,0) -- (3.5,0) node[right] {$Re$};
    \draw[->] (0,-3.5) -- (0,3.5) node[above] {$Im$};

    \foreach \x in {0,...,3} \fill (90*\x+45:1*1.414)  circle (0.2);
    \foreach \x in {0,...,3} \fill (90*\x+45:3*1.4141) circle (0.2);
    \foreach \x in {0,...,3} \fill (90*\x+18.4:3.2)    circle (0.2);
    \foreach \x in {0,...,3} \fill (90*\x+71.6:3.2)    circle (0.2);


    \draw ( 1.0,-0.1) node [below] {1}  -- ( 1.0, 0.1);
    \draw (-1.0,-0.1) node [below] {-1} -- (-1.0, 0.1);
    \draw (-0.1, 1.0) node [left]  {1}  -- ( 0.1, 1.0);
    \draw (-0.1,-1.0) node [left]  {-1} -- ( 0.1,-1.0);

    \draw ( 3.0,-0.1) node [below] {3}  -- ( 3.0, 0.1);
    \draw (-3.0,-0.1) node [below] {-3} -- (-3.0, 0.1);
    \draw (-0.1, 3.0) node [left]  {3}  -- ( 0.1, 3.0);
    \draw (-0.1,-3.0) node [left]  {-3} -- ( 0.1,-3.0);
  \end{tikzpicture}
#+end_minipage
#+attr_latex: :options [c]{0.3\textwidth}
#+begin_minipage latex
M=4
   \begin{tikzpicture}[scale=0.2]
    \draw[->] (-8.5,0) -- (8.5,0) node[right] {$Re$};
    \draw[->] (0,-8.5) -- (0,8.5) node[above] {$Im$};

    \foreach \x in {-8,...,-1}
      \foreach \y in {-8,...,-1} \fill (\x,\y)  circle (0.3);

    \foreach \x in {-8,...,-1}
      \foreach \y in {1,...,8} \fill (\x,\y)  circle (0.3);
      
    \foreach \x in {1,...,8}
      \foreach \y in {-8,...,-1} \fill (\x,\y)  circle (0.3);

   \foreach \x in {1,...,8}
      \foreach \y in {1,...,8} \fill (\x,\y)  circle (0.3);

  \end{tikzpicture}
#+end_minipage


**** Summery
In our communication system design problem, we introduced a mapper. We did not
say much about this operation so far. We only said that this block maps the
scrambled input into a sequence of symbols belonging to a certain alphabet. In
this lesson, we have explored in greater details this operation and how it is
related to the problem of satisfying the power constraints.

The sequence received at the receiver inevitably contains some form of
noise. For each symbol, if the noise level is high, the receiver wrongly
interpret the symbol for another one in the alphabet. It makes a decoding
error. The probability of decoding error depends on three factors

    the signal-to-noise ratio, i.e., the power of the signal with respect to the
    power of the noise, SNR is expressed in dB. Through SNR, the power
    constraints of the channel enters in the design problem and we cannot
    operate at an arbitrarily high SNR

    the decoding strategy, i.e., how smart we are at circumventing the effect of
    noise

    the choice of alphabet. If we increase the size of the alphabet, we can
    transmit more information per symbol but symbols are closer in the alphabet
    and the probability of error increases.

We have also studied two encoding schemes, pulse amplitude modulation (PAM) and
quadrature amplitude modulation (QAM) and analyzed their probability of
error. In the case of QAM, the choice of constellation size MMM can be picked as
to match a desired probability of error and SNR imposed by the channel
constraints. The final throughput of the system is MWMWMW. Our analysis of QAM
is based on the assumption that we transmit complex numbers over a real
channel. How to do this in practice is the topic of the next lesson.

*** Modulation and Demodulation
**** Intrdoduction
Welcome to Lesson 6.4 of Digital Signal Processing. In the previous module, we
saw an interesting signaling scheme that allows to increase the data rate while
keeping the same probability of error for a given power constraint. The problem
is that communication alphabet that we devised is complex-valued whereas we know
that physical channel can only handle real values. So in this lesson, we will
see how to transmit and recover a complex-valued symbol stream over a
real-valued channel. We will follow this with a concrete design example for the
telephone channel and finally we will compare the performance of the system with
the ultimate in data rate that is given us by the channel capacity formula.
**** Modulation and Demodulation

#+BEGIN_SRC ditaa  :file ./image/6.2_transmitter-02.png 

            +--------------+       +--------------+
            |              |       |              | a[n]   -----
  ..01100-->+  Scrambler   +---+-->+  Mapper      +------>( K ⬆ ) ---+
  01010..   |              |   ^   |              |        -----     |
            +--------------+   |   +--------------+                  |
                               |                                     |
                        random binary sequence                       |
                                                                     |
     +---------------------------------------------------------------+
     |
     |     +------------+     
     |     |     |      | b[n]
     +---->+   +-+-+    +----->
           |  -|-+-|->  |      
           |     |      |      
           +------------+      
                pi/k

      b[n] = b_r[n + jb_i[n] is a complex-values baseband signal
#+END_SRC

#+results:
[[file:./image/6.2_transmitter-02.png]]


So let's review where we stand in terms of transmitter design.  We have the
user's bitstream that comes into the system.  This is sent through a scrambler
that makes sure that the resulting bitstream is equiprobable.  The mapper will
split the bitstream into m-bit chunks.  And each chunk will be associated to a
complex-valued symbol.  This will create a complex value sequence a[n].  And to
fit that over the bandwidth prescribed by the channel, we have to upsample it,
which means inserting K minus 1 0's after each symbol of the sequence and then
low passing the sequence with a filter with cutoff frequency pi over K.

***** The passband signal

  #+ATTR_LATEX: :options [logo=\bcbook, couleur=yellow!10, barre=snake, arrondi=0.1]{The Passband Signal}
  #+BEGIN_bclogo
  To transmit complex value over the real channel, we first
  modulate the signal b[n] with the frequency at the carrier frequency and take
  the real part of the passband signal.
  #+END_bclogo

  #+begin_src latex
    \begin{align*}
      s[n] &= Re\{b[n]e^{j\omega_cn}\} \\
           &= Re\{(b_r[n] +jB_i[n])(cos \omega_cn +j sin \omega_c n)\} \\
           &= b_r[n] cos \omega_cn - b_i[n] sin \omega_cn
    \end{align*}
  #+end_src

  So we have a cosine carrier, and a sine carrier.  Now, these two carriers are
  orthogonal because they're shifted by a phase of 90 degrees.  Now, when two
  things are 90 degrees apart, they're said to be \textcolor{blue}{in quadrature}
  
  #+ATTR_LATEX: :options [leftmargin=3cm,labelwidth=2.7cm,itemindent=-2pt]
  - $b_r[n] cos \omega_cn$ :: In phase Part
  - $b_i[n] sin \omega_cn$ :: Quadrature Part

***** TODO Complex baseband signal Spectrum

***** Recovering the baseband signal
  let^s try the usual method (multiplying by the carrier, see Module 5.5.)

  Real Part:
  #+begin_src latex
    \begin{align*}
      s[n] cos \omega_c n &= b_r[n] cos^2 \omega_cn - b_i[n] sin \omega_cn \\
                          &= b_r[n] \frac{1 + cos 2\omega_cn}{2} - b_i[n] \frac{sin 2 \omega_cn}{2}  \\
                          &= \frac{1}{2}b_r[n] + \frac{1}{2}(b_r[n]cos2\omega_cn -b_i[n]sin2\omega_cn) \\
     \end{align*}
  #+end_src

 To get rid of the spurios components we need to low pass filter the so received
  signal. We have a \textcolor{blue}{matched filter confiugration} if we use the
  same low-pass filter at the receiver side as we have used at the transmitter
  side.

  Quadrature Part:
  #+begin_src latex
    \begin{align*}
      s[n] sin \omega_c n &= b_r[n] cos \omega_cn - b_i[n] sin^2\omega_cn \\
                          &= \frac{1}{2}b_r[n] + \frac{1}{2}(b_r[n]sin 2\omega_cn -b_i[n]cos 2\omega_cn) \\
     \end{align*}
  #+end_src

**** Design Example
  #+BEGIN_SRC ditaa  :file ./image/6.4_transmitter-02.png 

            +--------------+       +--------------+
            |              |       |              | a[n]   -----  
  ..01100-->+  Scrambler   +---+-->+  Mapper      +------>( K ⬆ ) ---+
  01010..   |              |   ^   |              |        -----     |
            +--------------+   |   +--------------+                  |
                               |                                     |
                        random binary sequence                       |
                                                                     |
     +---------------------------------------------------------------+
     |
     |     +------------+                   +---------+      +---------+
     |     |     |      | b[n]  -----  c[n] |         | s[n] |         |
     +---->+   +-+-+    +----->(  X  )----->+   Re    +----->+   D/A   +----> s(t)
           |  -|-+-|->  |       --+--       |         |      |         |
           |     |      |         ^         +---------+      +---------+
           +------------+         |         
                                  |         
                pi/k             jwn
                                e



#+END_SRC

#+results:
[[file:./image/6.4_transmitter-02.png]]

***** TODO Scetch the QAM Receiver

  
***** Example: the V.32 voiceband modem

- Bandwith Constraint
  - analog telephone channel: F_min = 4500 Hz, F_max = 2850 Hz
  - usable bandwith: W = 2400Hz, center frequency F_c = 1650Hz
  - \textcolor{blue}{pick: $F_s = 3 \cdot 2400Hz = 7200Hz$ so that K = 3}
  - \textcolor{blue}{$\omega_c = 0.458 \pi$}
- Power Constraint:
  - maximum SNR: 22dB (telephone line)
  
  - $\color{blue} P_{err} = 10^{-6}$
  - \textcolor{blue}{using QAM, we find the size of the alphabet resp. bits per symbol}
    #+begin_src latex
      \begin{equation*}
        \color{blue} M = log_2 \left( 1 - \frac{3 10^{22/10}}{2 ln(10^{-6}}\right) \approx 4.1865
      \end{equation*}
    #+end_src

  - \textcolor{blue}{So we pick M = 4 and use a 16-point constellation}

\textcolor{red}{Final data rate is WM = 9600 bits pers seconds}
- WM: Baude Rate \times bits per symbols = 2400Hz \times 4
- Baude Rate: identical with bandwith

***** Theoretical channel capacity
- we used very specific design choices to derive the \textcolor{blue}{throughput}
- what is the best one can do?

#+ATTR_LATEX: :options [logo=\bcbook, couleur=yellow!10, barre=snake, arrondi=0.1]{Shannon's capacity formula is the upper bound}
#+BEGIN_bclogo
  C = W log_2 (1 + SNR)
 #+END_bclogo

- for instance, for the previous example C \approx 175000 bps
- the gap can be narrowed by more advanced coding techniques

*** Receiver Design
- What is goining on by the sound made by a V.34 modem, while connecting to the
  internet?
- ToDo Draw the receiver concept
- Receiver has to cope with four potential sources of problem:
  - interference $\Rightarrow$ \textcolor{blue}{handshake and line porbing}
  - propagation delay $\Rightarrow$ \textcolor{blue}{delay estimation procedure}
  - linear distortion $\Rightarrow$ \textcolor{blue}{adaptive equalization techniques}
  - clock dirfts $\Rightarrow$ \textcolor{blue}{timing recovery}
- The 2 main problems
  - ToDo draw the chain of events
  - channel distortion D(j\Omega)
  - (time-varying) discrepancies in clocks T'_s = T_s
**** Delay Compensation

Assume the channel is a simple delay: $\hat{s}$ = s(t-d) = D(j\Omega) = e^{j\Omega d}
- channel introduces a delay of d seconds
- we can write d = (b + \tau) T_s with b $\in \mathbb{N}$ and |\tau| < 1/2
- b is called the bulk delay
- \tau is the fractional delay

- Estimate Fractional Delay ::

- Compute Lagrange Coefficients :: 
  
Compensation steps:
1. Estimate the fractional delay
2. Compute the Lagrange coefficients
3. Filter with FIR filter
**** Adaptive Equalization
*** ADSL

*** Notes and Suplementatry materials

* Week 8 Module 7: 
** Image Processing

* Installation Prerequistis

Prerequisite dotEmacs
- sudo apt install fonts-firacode
- sudo apt install fonts-cantarlell
- isoeveka-etoil
  Download from github:
  - sudo mkdir /usr/local/share/fonts/iosevka-font
  - sudo cp iosevka-etoile.ttc /usr/local/share/fonts/iosevka-font/
  - sudo fc-cache -fv
- ditaa
  Download from sourceforge to ~/java
  ln -s ditaa0_9.jar ditaa.jar
- sudo apt install default-jre          // for ditaa
- sudo apt install texlive-xetex
- sudo apt install texlive-pstricks
- sudo apt -y install texlive-science
- sudo apt install dvipng               // org-latex-preview
- sudo apt install imagemagick          // display inline image
- all-the-icons (melpa)
- git config --global user.email "email@example.com"
- tree-sitter how to install for lsp server????
** TODO Add to github repositiory
- File mode specification error: (json-readtable-error 47)
- Unable to read file
  "/home/duagon/.emacs.d/git-submodules/org-html-themes/org/theme-readtheorg.setup"
  [2 times]
