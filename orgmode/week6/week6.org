#+CATEGORY: SP4COMM
* Week 6 Module 4: Part 2 Filter Design

- First strategy of filter design: Imitation
  - Impulse trancation
  - Window Method
  - Frequency Sampling
  Trying to replicate the structure of either the impulse response or the frequency
  response of ideal filters.
** Filter Design Part 1
- An ideal filter is not realizable in practice because the impulse response is a
  two-sided infinite support sequence.
*** Approximation by truncation
1. Pick $\omega_c$
2. Compute ideal impulse response h[n]
3. truncate h[n] to a finite-support $\hat{h}[n]$
4. $\hat{h}[n]$ defines an FIR filter

#+BEGIN_SRC latex
  \text{FIR approximation of lenght M = 2N+1}
  \begin{align*}
    \hat{h}[n]
    &=
      \begin{cases}
        \frac{\omega_c}{\pi} \; sinc(\frac{\omega_c}{\pi} n) & |n| \leq N \\
        0  & \text{otherwise}
      \end{cases}  
  \end{align*}
#+END_SRC  

*** The Gibbs Phenomenon
- The maximum error around the cutoff frequency is around 9% fo the height of the jump
  regardless of N.

#+BEGIN_SRC octave :exports results :results file
  pkg load signal


  t=linspace(-2,2,2000);
  u=linspace(-2,2,2000);
  sq=[zeros(1,500),2*ones(1,1000),zeros(1,500)];
  k=2;
  N=[1,3,7,19,49,70];                     # number of samples
  for n=1:6;
    an=[];
    for  m=1:N(n)
      # an=[an,2*k*sin(m*pi/2)/(m*pi)];      # sinc
      an=[an,2*sinc(m/2)];      # sinc
    end;
    fN=k/2;
    for m=1:N(n)
      fN=fN+an(m)*cos(m*pi*t/2);            # frequnecy response
    end;
                                            # Graphik  
    figure( 1, "visible", "off" )           # Do not open the graphic window in org
    nq=int2str(N(n));
    subplot(3,2,n),
    plot(u,sq,'r','LineWidth',2);
    hold on;
    plot(t,fN,'LineWidth',2);
    hold off; axis([-2 2 -0.5 2.5]);
    ## set(gca,'XTick',-pi:pi/2:pi)
    ## set(gca,'XTickLabel',{'-pi','-pi/2','0','pi/2','pi'})
    grid;
    xlabel('Time'), ylabel('y_N(t)');title(['N= ',nq]);
  end;                                      # ans = f'

  print -dpng ./image/gibbs1.png;
  ans = "./image/gibbs1.png";
#+END_SRC

#+results:
[[file:./image/gibbs1.png]]


#+BEGIN_SRC octave :exports results :results file
    pkg load signal

  clc; clear all; close all;

  % Specification
  A = 1;                                       % Peak-to-peak amplitude of square wave
  Tau = 10;                                    % Total range in which the square wave is defined (here -5 to 5)
  T0 = 20;                                     % Period (time of repeatation of square wave), here 10 
  C = 30;                                      % Coefficients (sinusoids) to retain 
  N = 1001;                                    % Number of points to consider
  t = linspace(-(T0-Tau),(T0-Tau),N);          % Time axis
  X = zeros(1,N); X(t>=-Tau/2 & t<=Tau/2) = A; % Original signal
  R = 0;                                       % Initialize the approximated signal
  k = -C:C;                                    % Fourier coefficient number axis  
  f = zeros(1,2*C+1);                          % Fourier coefficient values

  % Loop for plotting approximated signals for different retained coeffs.
  for c = 0:C % Number of retained coefficients
      for n = -c:c % Summation range (See equation above in comments)

          % Sinc part of the Fourier coefficients calculated separately 
          if n~=0
              Sinc = (sin(pi*n*Tau/T0)/((pi*n*Tau/T0))); % At n NOTEQUAL to 0
          else
              Sinc = 1; % At n EQUAL to 0
          end
          Cn = (A*Tau/T0)*Sinc; % Actual Fourier series coefficients
          f(k==n) = Cn; % Put the Fourier coefficients at respective places
          R = R + Cn*exp(1j*n*2*pi/T0.*t); % Sum all the coefficients
      end

      R = real(R); % So as to get rid of 0.000000000i (imaginary) factor
      Max = max(R); Min = min(R); M = max(abs(Max),abs(Min)); % Maximum error
      Overshoot = ((M-A)/A)*100; % Overshoot calculation
      E = sum((X-R).^2); % Error energy calculation

      % Plots:
      % Plot the Fourier coefficients
     figure( 1, "visible", "off" )           # Do not open the graphic window in org
      % subplot(1,2,1); stem(k,f,'m','LineWidth',1); axis tight; grid on;
   subplot(2,1,1);  stem(k,f,'LineWidth',2); axis tight; grid on;
      xlabel('Fourier coefficient index');ylabel('Magnitude');
      title('Fourier coefficients');

      % Plot the approximated signal
      subplot(2,1,2); plot(t,X,t,R,'LineWidth',2); axis tight; grid on; 
      xlabel('Time (t)'); ylabel('Amplitude');
      title(['Approximation for N = ', num2str(c),...
      '. Overshoot = ',num2str(Overshoot),'%','. Error energy: ',num2str(E)])

      pause(0.1); % Pause for a while
      R = 0; % Reset the approximation to calculate new one
  end

    print -dpng ./image/gibbs2.png;
    ans = "./image/gibbs2.png";
#+END_SRC

#+results:
[[file:./image/gibbs2.png]]

*** Understanding the Gibbs Phenomen
- Convolution Theorem :: $\displaystyle DTFT\{(x*y)[n]\} = X(e^{j\omega}) \; Y(e^{j\omega})$
- Modulation Theorem :: $\displaystyle DTFT\{(x \; y)[n]\} = X(e^{j \omega}) *
  Y(e^{j\omega})$
*** Convolution of DTFT's
$\text{in }\mathbb{C}^{\infty}$
#+BEGIN_SRC latex
  \begin{align*}
    (x * y)[n] &= \big\langle x^*[k], y[n-k] \big\rangle \\
               &= \sum_{n=-\infty}^{\infty} x[k]y[n-k]
  \end{align*}
#+END_SRC

$\text{in }\mathbb{L}\Big(\big[-\pi,\pi\big]\Big)$
#+BEGIN_SRC latex
  \begin{align*}
    (X * Y)(e^{j\;\omega}) &= \big\langle X^*(e^{j\;\sigma}), Y(e^{j\;\omega-\sigma}) \big\rangle \\
                         &=  \frac{1}{2\pi}\int_{-\pi}^{pi} X^*(e^{j\;\sigma})\;Y(e^{j\;\omega-\sigma})\;d\sigma
  \end{align*}
#+END_SRC

** Realizable Filters
** Filter Design Part 2
** Filter Design Part 3
** Notes and Supplementary Materials
